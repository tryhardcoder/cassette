TIMELINE:
11 weeks total
3 weeks buffer
assume 8 weeks of working time

CHECKLIST:
    CODE:
        [X] textured quad renderer
        [X] simple physics
        [X] animation system
        [ ] player controller
        [X] hit system for dummy
        [X] player hurt system
        [ ] boss AI
        [ ] health bars
        [ ] respawn system
        [X] UI system
        [ ] pause menu
        [ ] main menu
        [ ] particle system
        [ ] sfx and music system

    ART:
        [X] demo level background
        [ ] Boss
            [ ] model
            [ ] rig
            [ ] walk
            [ ] attack
            [ ] death

        [ ] player
            [X] base design
            [X] idle
            [X] walk
            [X] attack
            [X] roll
            [ ] hurt
            [ ] death

    EXTRA CREDIT:
        ART:
            [ ] SFX
                [ ] music
                [ ] main menu music
                [ ] player hit sound
                [ ] player walk sound
                [ ] player death sound
                [ ] boss hit sound
                [ ] boss walk sound
                [ ] boss death sound

            [ ] UI
                [ ] main menu
                [ ] pause menu

        CODE:
            [ ] menu logic
            [ ] particle system
            [ ] sfx and music system

    BUGS:



9/17/23:
    day one. Set up project structure, copied over build scripts, main function, libraries, and base files.
    Started from scratch with graphics system, decided to put raw openGL in the main function because abstractions were a lot of work
    and don't actually help that much. (Only going with one backend.) Used the matrix and vector library i made for other projects.
    Copied over a simple AABB AABB intersection function for physics.  Decided that making a simulation was a lot of work and physics
    for the player was going to be hard coded. Added hardcoded physics for the player. Added jump buffering (because of the interesting
    choice to have inputs per frame and not per tick) (it doesn't work if you try to read inputs per tick and they are updated per
    frame.)

    Some other things:
    basic entity structure:
        flags to enable different engine systems (collision, rendering, animation, etc.)
        function pointers per entity for update and collsion reaction logic.
        per type (player, boss) data is going to be a unionized part of the entity struct

    Libraries I am using:
        GLFW for windowing and OS abstraction
        GLAD for loading openGL functions
        stbImage for image loading
        stbTrueType for font loading and rasterization
        blu (i made this one) for UI // credit here for many design decisions: https://www.rfleury.com/p/ui-series-table-of-contents
        base (i made this one) for memory arenas and convinence features

    Build system:
        project is built using simple batchfiles and gcc to compile and link


9/23 / 9/24
    Started on character modeling in blender. Learned about basic controls to drag on axis. Did basic rigging and animation for the player.
    Learned about weight painting and how to modify topology to accomodate joints. Did some basic shader stuff also. Techniques for clothing modeling also

    https://www.youtube.com/watch?v=BzTN2yTgTj0&t=568s&ab_channel=lacruzo

9/30
    Made a really simple background scene
    --9/31 // today was also the day I messed with the compositor/mist pass using this:
    https://www.youtube.com/watch?v=uXXYUv-793c&ab_channel=Markom3D

9/31
    learned about array modifier in blender, used it to make a shitload of windows. Half followed a tutorial and half freestyled adding a
    backgound image to the compositor.

10/3 fixed sprite aspect issues

10/5
factored out animation system into a flag so that things like the dummy and boss and possibly background can be animated
added an invalid texture to help debugg null textures without crashing

10/7
animated and added roll, didn't really learn much except that the sprite animation system has to be separated from the player phyiscs "animations" (rolling/hurt)
because weather or not the player is responsive is not only dependent on which animation is playing but also where in the animation

redid the roll to go forwards because it makes more sense gameplay wise

found this really informative video about arm animation. I don't have IK setup on the rig tho so some it isn't applicable rn
https://www.youtube.com/watch?v=JnkAlwMjalc&ab_channel=Doodley

10/8
animated a hurt animation which doesn't look the best, will have to redo at some point
also came up with the hurt detection by putting colliders on a separate layer and masking for hurt boxes
the player code is already becoming a huge mess, may have to look into ways to structure it better.

10/21
spent some time adapting the blue UI library into the project and got it rendering. Pretty uneventful, not text is on screen.
There are some problems with it, like how all of the Uniform blocks aren't unions, and how doing format strings in UI is a huge pain.
Those are things to do in other projects.